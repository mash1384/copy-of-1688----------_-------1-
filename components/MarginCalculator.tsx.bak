import * as React from 'react';
import { useState, useMemo } from 'react';
import { Product, SalesChannel, ProductOption } from '../types';
import Card from './ui/Card';
import { CNY_TO_KRW_RATE } from '../constants';

interface MarginCalculatorProps {
  products: Product[];
  onUpdateProductOption: (productId: string, optionId: string, updates: Partial<ProductOption>) => void;
}

interface CalculationData {
  // 매입 관련
  baseCostCny: number;
  quantity: number;
  shippingCostKrw: number;
  customsFeeKrw: number;
  otherFeeKrw: number;
  
  // 판매 관련
  channel: SalesChannel;
  channelFeePercentage: number;
  packagingCostKrw: number;
  domesticShippingKrw: number;
  
  // 목표 설정
  targetMarginRate: number;
  targetProfitRate: number;
  
  // 계산 모드
  calculationMode: 'margin' | 'profit' | 'price';
  customSalePrice: number;
}

const MarginCalculator: React.FC<MarginCalculatorProps> = ({ products, onUpdateProductOption }) => {
  const [selectedProductId, setSelectedProductId] = useState<string>('');
  const [selectedOptionId, setSelectedOptionId] = useState<string>('');
  const [data, setData] = useState<CalculationData>({
    baseCostCny: 0,
    quantity: 1,
    shippingCostKrw: 0,
    customsFeeKrw: 0,
    otherFeeKrw: 0,
    channel: SalesChannel.SMART_STORE,
    channelFeePercentage: 5.5,
    packagingCostKrw: 500,
    domesticShippingKrw: 3000,
    targetMarginRate: 50,
    targetProfitRate: 30,
    calculationMode: 'margin',
    customSalePrice: 0
  });

  // 선택된 상품 정보
  const selectedProduct = products.find(p => p.id === selectedProductId);
  const selectedOption = selectedProduct?.options.find(o => o.id === selectedOptionId);

  // 상품 선택 시 자동으로 원가 정보 업데이트
  const handleProductSelect = (productId: string) => {
    setSelectedProductId(productId);
    setSelectedOptionId('');
    const product = products.find(p => p.id === productId);
    if (product) {
      setData(prev => ({ ...prev, baseCostCny: product.baseCostCny }));
    } else {
      // 직접 입력 모드로 전환 시 기본값 유지
      setData(prev => ({ ...prev, baseCostCny: prev.baseCostCny }));
    }
  };

  const handleOptionSelect = (optionId: string) => {
    setSelectedOptionId(optionId);
    const option = selectedProduct?.options.find(o => o.id === optionId);
    if (option) {
      // 선택된 옵션의 실제 원가를 기반으로 역산하여 매입가 추정
      const estimatedBaseCost = option.costOfGoods / CNY_TO_KRW_RATE;
      setData(prev => ({ ...prev, baseCostCny: estimatedBaseCost }));
    }
  };

  // 상품 판매가 적용 기능
  const applyToProduct = () => {
    if (!selectedProduct || !selectedOption) {
      alert('상품과 옵션을 먼저 선택해주세요.');
      return;
    }

    if (calculations.recommendedPrice <= 0) {
      alert('유효한 판매가가 계산되지 않았습니다.');
      return;
    }

    const recommendedPrice = Math.round(calculations.recommendedPrice);
    const confirmMessage = `${selectedProduct.name} - ${selectedOption.name}에 권장 판매가 ₩${recommendedPrice.toLocaleString()}를 저장하시겠습니까?\n\n이 정보는 상품 관리에서 확인할 수 있습니다.`;
    
    if (window.confirm(confirmMessage)) {
      // 실제로 상품 옵션에 권장 판매가 저장
      onUpdateProductOption(selectedProduct.id, selectedOption.id, {
        recommendedPrice: recommendedPrice
      });
      
      alert(`✅ 판매가가 저장되었습니다!\n\n상품: ${selectedProduct.name}\n옵션: ${selectedOption.name}\n권장 판매가: ₩${recommendedPrice.toLocaleString()}\n\n💡 상품 관리 페이지에서 확인하실 수 있습니다.`);
    }
  };

  const calculations = useMemo(() => {
    // 1. 개당 실제 원가 계산
    const baseCostKrw = data.baseCostCny * CNY_TO_KRW_RATE;
    const totalPurchaseCost = (baseCostKrw * data.quantity) + data.shippingCostKrw + data.customsFeeKrw + data.otherFeeKrw;
    const actualCostPerItem = totalPurchaseCost / data.quantity;
    
    // 2. 판매 시 추가 비용 (개당)
    const packagingCost = data.packagingCostKrw;
    const shippingCost = data.domesticShippingKrw;
    
    // 3. 계산 모드별 결과
    let recommendedPrice = 0;
    let actualMarginRate = 0;
    let actualProfitRate = 0;
    let netProfit = 0;
    
    if (data.calculationMode === 'margin') {
      // 마진율 기준으로 판매가 계산
      // 판매가 = 원가 / (1 - 마진율/100)
      const totalCostPerItem = actualCostPerItem + packagingCost + shippingCost;
      recommendedPrice = totalCostPerItem / (1 - data.targetMarginRate / 100);
      
      // 채널 수수료 고려한 실제 판매가
      recommendedPrice = recommendedPrice / (1 - data.channelFeePercentage / 100);
      
    } else if (data.calculationMode === 'profit') {
      // 순이익률 기준으로 판매가 계산
      const totalCostPerItem = actualCostPerItem + packagingCost + shippingCost;
      recommendedPrice = totalCostPerItem * (1 + data.targetProfitRate / 100);
      
      // 채널 수수료 고려한 실제 판매가
      recommendedPrice = recommendedPrice / (1 - data.channelFeePercentage / 100);
      
    } else {
      // 사용자 지정 판매가
      recommendedPrice = data.customSalePrice;
    }
    
    // 4. 실제 수익성 계산
    const grossRevenue = recommendedPrice;
    const channelFee = grossRevenue * (data.channelFeePercentage / 100);
    const netRevenue = grossRevenue - channelFee;
    const totalCosts = actualCostPerItem + packagingCost + shippingCost;
    netProfit = netRevenue - totalCosts;
    
    actualMarginRate = grossRevenue > 0 ? ((grossRevenue - totalCosts) / grossRevenue) * 100 : 0;
    actualProfitRate = totalCosts > 0 ? (netProfit / totalCosts) * 100 : 0;
    
    // 5. 투자 회수 분석
    const totalInvestment = totalPurchaseCost; // 총 투자금 (매입비용 + 추가비용)
    const breakEvenQuantity = netRevenue > 0 ? totalInvestment / netRevenue : 0; // 투자 회수 필요 판매량 (실제 수취액 기준)
    
    // 6. 전체 수량 판매 시 수익 분석
    const totalRevenue = recommendedPrice * data.quantity; // 총 매출
    const totalChannelFee = totalRevenue * (data.channelFeePercentage / 100); // 총 채널 수수료
    const totalSellingCosts = (packagingCost + shippingCost) * data.quantity; // 총 판매 비용 (포장비 + 배송비)
    const totalNetProfit = totalRevenue - totalChannelFee - totalPurchaseCost - totalSellingCosts; // 순 총 수익
    const roi = totalInvestment > 0 ? (totalNetProfit / totalInvestment) * 100 : 0; // 투자 대비 수익률 (ROI)
    
    return {
      baseCostKrw,
      actualCostPerItem,
      totalCostPerItem: actualCostPerItem + packagingCost + shippingCost,
      recommendedPrice,
      grossRevenue,
      channelFee,
      netRevenue,
      netProfit,
      actualMarginRate,
      actualProfitRate,
      totalCosts,
      // 투자 회수 분석
      totalInvestment,
      breakEvenQuantity,
      // 전체 판매 시 수익 분석
      totalRevenue,
      totalChannelFee,
      totalSellingCosts,
      totalNetProfit,
      roi
    };
  }, [data]);

  const handleInputChange = (field: keyof CalculationData, value: any) => {
    setData(prev => ({ ...prev, [field]: value }));
  };

  const handleChannelChange = (channel: SalesChannel) => {
    let feePercentage = 5.5; // 기본값
    switch (channel) {
      case SalesChannel.SMART_STORE:
        feePercentage = 5.5;
        break;
      case SalesChannel.COUPANG:
        feePercentage = 10.8;
        break;
      case SalesChannel.OWN_MALL:
        feePercentage = 2.0;
        break;
      default:
        feePercentage = 5.0;
    }
    
    setData(prev => ({ 
      ...prev, 
      channel, 
      channelFeePercentage: feePercentage 
    }));
  };

  const formatCurrency = (value: number) => `₩${Math.round(value).toLocaleString()}`;

  return (
    <div className="space-y-6">
      {/* 헤더 */}
      <div className="text-center mb-4">
        <h1 className="text-2xl font-bold text-gray-800 mb-1">🧮 마진 계산기</h1>
        <p className="text-sm text-gray-600">매입부터 판매까지 모든 비용을 고려한 정확한 수익성 분석</p>
      </div>

      {/* 핵심 결과 요약 - 상단에 배치 */}
      {(data.baseCostCny > 0 || data.customSalePrice > 0) && (
        <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-4 rounded-lg border border-blue-200 mb-4">
          <h2 className="text-lg font-bold text-gray-800 mb-3 text-center">📊 계산 결과 요약</h2>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
            <div className="text-center">
              <div className="text-xs text-gray-600 mb-1">권장 판매가</div>
              <div className="text-lg font-bold text-blue-600">{formatCurrency(calculations.recommendedPrice)}</div>
            </div>
            <div className="text-center">
              <div className="text-xs text-gray-600 mb-1">개당 순이익</div>
              <div className={`text-lg font-bold ${calculations.netProfit > 0 ? 'text-green-600' : 'text-red-600'}`}>
                {formatCurrency(calculations.netProfit)}
              </div>
            </div>
            <div className="text-center">
              <div className="text-xs text-gray-600 mb-1">마진율</div>
              <div className="text-lg font-bold text-purple-600">{calculations.actualMarginRate.toFixed(1)}%</div>
            </div>
            <div className="text-center">
              <div className="text-xs text-gray-600 mb-1">투자 회수량</div>
              <div className="text-lg font-bold text-orange-600">
                {calculations.breakEvenQuantity > 0 ? `${Math.ceil(calculations.breakEvenQuantity)}개` : '-'}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* 벤토 그리드 레이아웃 */}
      <div className="grid grid-cols-12 gap-3 auto-rows-min">
        
        {/* 상품 선택 - 넓은 카드 */}
        <Card className="col-span-6 p-3">
            <h3 className="text-sm font-semibold text-gray-800 mb-2 flex items-center">
              🎯 상품 선택 (선택사항)
            </h3>
            <div className="space-y-3">
              <div>
                <label className="block text-xs font-medium text-gray-600 mb-1">상품</label>
                <select
                  value={selectedProductId}
                  onChange={(e) => handleProductSelect(e.target.value)}
                  className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="">직접 입력 모드</option>
                  {products.map(product => (
                    <option key={product.id} value={product.id}>{product.name}</option>
                  ))}
                </select>
              </div>
              
              {selectedProductId && (
                <div>
                  <label className="block text-xs font-medium text-gray-600 mb-1">옵션</label>
                  <select
                    value={selectedOptionId}
                    onChange={(e) => handleOptionSelect(e.target.value)}
                    className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="">옵션 선택</option>
                    {selectedProduct?.options.map(option => (
                      <option key={option.id} value={option.id}>
                        {option.name} (재고: {option.stock}개, 원가: ₩{Math.round(option.costOfGoods).toLocaleString()})
                      </option>
                    ))}
                  </select>
                </div>
              )}
              
              {selectedProduct && selectedOption && calculations.recommendedPrice > 0 && (
                <div className="bg-blue-50 p-3 rounded-lg border border-blue-200">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium text-blue-800">선택된 상품</span>
                    <button
                      onClick={applyToProduct}
                      className="px-3 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 transition-colors"
                    >
                      판매가 메모
                    </button>
                  </div>
                  <div className="text-xs text-blue-700">
                    <div>{selectedProduct.name} - {selectedOption.name}</div>
                    <div>현재 원가: ₩{Math.round(selectedOption.costOfGoods).toLocaleString()}</div>
                    <div>권장 판매가: ₩{Math.round(calculations.recommendedPrice).toLocaleString()}</div>
                  </div>
                </div>
              )}
            </div>
          </Card>

          {/* 매입 정보 */}
          <Card className="col-span-3 p-3">
            <h3 className="text-sm font-semibold text-gray-800 mb-2 flex items-center">
              📦 매입 정보
            </h3>
            <div className="space-y-3">
              <div className="grid grid-cols-2 gap-3">
                <div>
                  <label className="block text-xs font-medium text-gray-600 mb-1">매입가 (¥)</label>
                  <input
                    type="number"
                    value={data.baseCostCny}
                    onChange={(e) => handleInputChange('baseCostCny', Number(e.target.value))}
                    className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-transparent"
                    placeholder="0"
                    step="0.01"
                  />
                </div>
                <div>
                  <label className="block text-xs font-medium text-gray-600 mb-1">수량</label>
                  <input
                    type="number"
                    value={data.quantity}
                    onChange={(e) => handleInputChange('quantity', Number(e.target.value))}
                    className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-transparent"
                    placeholder="1"
                    min="1"
                  />
                </div>
              </div>
              
              <div className="grid grid-cols-3 gap-2">
                <div>
                  <label className="block text-xs font-medium text-gray-600 mb-1">배송비</label>
                  <input
                    type="number"
                    value={data.shippingCostKrw}
                    onChange={(e) => handleInputChange('shippingCostKrw', Number(e.target.value))}
                    className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-transparent"
                    placeholder="0"
                  />
                </div>
                <div>
                  <label className="block text-xs font-medium text-gray-600 mb-1">관세</label>
                  <input
                    type="number"
                    value={data.customsFeeKrw}
                    onChange={(e) => handleInputChange('customsFeeKrw', Number(e.target.value))}
                    className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-transparent"
                    placeholder="0"
                  />
                </div>
                <div>
                  <label className="block text-xs font-medium text-gray-600 mb-1">기타</label>
                  <input
                    type="number"
                    value={data.otherFeeKrw}
                    onChange={(e) => handleInputChange('otherFeeKrw', Number(e.target.value))}
                    className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-transparent"
                    placeholder="0"
                  />
                </div>
              </div>
            </div>
          </Card>

          {/* 판매 정보 */}
          <Card className="col-span-3 p-3">
            <h3 className="text-sm font-semibold text-gray-800 mb-2 flex items-center">
              🛒 판매 정보
            </h3>
            <div className="space-y-3">
              <div>
                <label className="block text-xs font-medium text-gray-600 mb-1">판매 채널</label>
                <select
                  value={data.channel}
                  onChange={(e) => handleChannelChange(e.target.value as SalesChannel)}
                  className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value={SalesChannel.SMART_STORE}>스마트스토어 (5.5%)</option>
                  <option value={SalesChannel.COUPANG}>쿠팡 (10.8%)</option>
                  <option value={SalesChannel.OWN_MALL}>자사몰 (2.0%)</option>
                  <option value={SalesChannel.OTHER}>기타</option>
                </select>
              </div>
              
              <div className="grid grid-cols-3 gap-2">
                <div>
                  <label className="block text-xs font-medium text-gray-600 mb-1">수수료(%)</label>
                  <input
                    type="number"
                    value={data.channelFeePercentage}
                    onChange={(e) => handleInputChange('channelFeePercentage', Number(e.target.value))}
                    className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-transparent"
                    placeholder="5.5"
                    step="0.1"
                  />
                </div>
                <div>
                  <label className="block text-xs font-medium text-gray-600 mb-1">포장비</label>
                  <input
                    type="number"
                    value={data.packagingCostKrw}
                    onChange={(e) => handleInputChange('packagingCostKrw', Number(e.target.value))}
                    className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-transparent"
                    placeholder="500"
                  />
                </div>
                <div>
                  <label className="block text-xs font-medium text-gray-600 mb-1">국내배송</label>
                  <input
                    type="number"
                    value={data.domesticShippingKrw}
                    onChange={(e) => handleInputChange('domesticShippingKrw', Number(e.target.value))}
                    className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-transparent"
                    placeholder="3000"
                  />
                </div>
              </div>
            </div>
          </Card>

          {/* 계산 모드 */}
          <Card>
            <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center">
              🎯 계산 모드
            </h3>
            <div className="space-y-3">
              <div className="grid grid-cols-1 gap-2">
                <label className="flex items-center text-sm">
                  <input
                    type="radio"
                    name="calculationMode"
                    value="margin"
                    checked={data.calculationMode === 'margin'}
                    onChange={(e) => handleInputChange('calculationMode', e.target.value)}
                    className="mr-2"
                  />
                  마진율 기준
                </label>
                <label className="flex items-center text-sm">
                  <input
                    type="radio"
                    name="calculationMode"
                    value="profit"
                    checked={data.calculationMode === 'profit'}
                    onChange={(e) => handleInputChange('calculationMode', e.target.value)}
                    className="mr-2"
                  />
                  순이익률 기준
                </label>
                <label className="flex items-center text-sm">
                  <input
                    type="radio"
                    name="calculationMode"
                    value="price"
                    checked={data.calculationMode === 'price'}
                    onChange={(e) => handleInputChange('calculationMode', e.target.value)}
                    className="mr-2"
                  />
                  판매가 직접 입력
                </label>
              </div>
              
              {data.calculationMode === 'margin' && (
                <div>
                  <label className="block text-xs font-medium text-gray-600 mb-1">목표 마진율 (%)</label>
                  <input
                    type="number"
                    value={data.targetMarginRate}
                    onChange={(e) => handleInputChange('targetMarginRate', Number(e.target.value))}
                    className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-transparent"
                    placeholder="50"
                    step="0.1"
                  />
                </div>
              )}
              
              {data.calculationMode === 'profit' && (
                <div>
                  <label className="block text-xs font-medium text-gray-600 mb-1">목표 순이익률 (%)</label>
                  <input
                    type="number"
                    value={data.targetProfitRate}
                    onChange={(e) => handleInputChange('targetProfitRate', Number(e.target.value))}
                    className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-transparent"
                    placeholder="30"
                    step="0.1"
                  />
                </div>
              )}
              
              {data.calculationMode === 'price' && (
                <div>
                  <label className="block text-xs font-medium text-gray-600 mb-1">판매가 (₩)</label>
                  <input
                    type="number"
                    value={data.customSalePrice}
                    onChange={(e) => handleInputChange('customSalePrice', Number(e.target.value))}
                    className="w-full px-2 py-1.5 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-transparent"
                    placeholder="0"
                  />
                </div>
              )}
            </div>
          </Card>
        </div>

        {/* 기본 분석 결과 */}
        <div className="space-y-4">
          {/* 원가 & 판매가 통합 */}
          <Card>
            <h3 className="text-lg font-semibold text-gray-800 mb-3">💰 원가 & 판매가</h3>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span className="text-gray-600">기본 매입가</span>
                <span className="font-medium">{formatCurrency(calculations.baseCostKrw)}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">실제 개당 원가</span>
                <span className="font-medium text-orange-600">{formatCurrency(calculations.actualCostPerItem)}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">판매 부대비용</span>
                <span className="font-medium">{formatCurrency(data.packagingCostKrw + data.domesticShippingKrw)}</span>
              </div>
              <div className="flex justify-between border-t pt-2 font-semibold">
                <span className="text-gray-800">총 비용 (개당)</span>
                <span className="text-red-600">{formatCurrency(calculations.totalCostPerItem)}</span>
              </div>
              <div className="bg-blue-50 p-3 rounded-lg mt-3">
                <div className="flex justify-between items-center">
                  <span className="text-blue-800 font-semibold">권장 판매가</span>
                  <span className="text-xl font-bold text-blue-600">{formatCurrency(calculations.recommendedPrice)}</span>
                </div>
              </div>
            </div>
          </Card>

          {/* 수익성 지표 */}
          <Card>
            <h3 className="text-lg font-semibold text-gray-800 mb-3">📈 수익성 지표</h3>
            <div className="grid grid-cols-2 gap-3">
              <div className="bg-blue-50 p-3 rounded-lg text-center">
                <div className="text-xs text-blue-600 font-medium">마진율</div>
                <div className="text-xl font-bold text-blue-800">{calculations.actualMarginRate.toFixed(1)}%</div>
              </div>
              <div className="bg-green-50 p-3 rounded-lg text-center">
                <div className="text-xs text-green-600 font-medium">순이익률</div>
                <div className="text-xl font-bold text-green-800">{calculations.actualProfitRate.toFixed(1)}%</div>
              </div>
            </div>
            <div className="mt-3 space-y-2 text-sm">
              <div className="flex justify-between">
                <span className="text-gray-600">채널 수수료</span>
                <span className="text-red-500">-{formatCurrency(calculations.channelFee)}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">실제 수취액</span>
                <span className="font-medium">{formatCurrency(calculations.netRevenue)}</span>
              </div>
              <div className="flex justify-between border-t pt-2 font-semibold">
                <span className="text-gray-800">개당 순이익</span>
                <span className={calculations.netProfit > 0 ? 'text-green-600' : 'text-red-600'}>
                  {formatCurrency(calculations.netProfit)}
                </span>
              </div>
            </div>
          </Card>

          {/* 손익분기점 */}
          <Card>
            <h3 className="text-lg font-semibold text-gray-800 mb-3">⚖️ 손익분기점</h3>
            <div className="bg-orange-50 p-3 rounded-lg">
              <div className="text-center">
                <div className="text-xs text-orange-600 font-medium">최소 판매가</div>
                <div className="text-lg font-bold text-orange-800">
                  {formatCurrency(calculations.totalCostPerItem / (1 - data.channelFeePercentage / 100))}
                </div>
              </div>
            </div>
            <div className="text-xs text-gray-500 mt-2 text-center">
              채널 수수료를 고려한 최소 판매가
            </div>
          </Card>
        </div>

        {/* 투자 & 수익 분석 */}
        <div className="space-y-4">
          {/* 투자 회수 분석 */}
          <Card>
            <h3 className="text-lg font-semibold text-gray-800 mb-3">💸 투자 회수 분석</h3>
            <div className="space-y-2 text-sm">
              <div className="bg-red-50 p-3 rounded-lg">
                <div className="text-center">
                  <div className="text-xs text-red-600 font-medium">총 투자금</div>
                  <div className="text-lg font-bold text-red-800">{formatCurrency(calculations.totalInvestment)}</div>
                </div>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">개당 수취액</span>
                <span className="font-medium text-green-600">{formatCurrency(calculations.netRevenue)}</span>
              </div>
              <div className="bg-blue-50 p-3 rounded-lg">
                <div className="text-center">
                  <div className="text-xs text-blue-600 font-medium">회수 필요 판매량</div>
                  <div className="text-lg font-bold text-blue-800">
                    {calculations.breakEvenQuantity > 0 ? `${Math.ceil(calculations.breakEvenQuantity)}개` : '회수 불가'}
                  </div>
                </div>
              </div>
            </div>
            
            {calculations.breakEvenQuantity > 0 && calculations.breakEvenQuantity <= data.quantity && (
              <div className="text-xs text-green-600 bg-green-50 p-2 rounded mt-3">
                ✅ 매입 수량 내에서 투자금 회수 가능
              </div>
            )}
            {calculations.breakEvenQuantity > data.quantity && calculations.breakEvenQuantity > 0 && (
              <div className="text-xs text-orange-600 bg-orange-50 p-2 rounded mt-3">
                ⚠️ {Math.ceil(calculations.breakEvenQuantity - data.quantity)}개 추가 판매 필요
              </div>
            )}
            {calculations.breakEvenQuantity <= 0 && (
              <div className="text-xs text-red-600 bg-red-50 p-2 rounded mt-3">
                ❌ 현재 판매가로는 투자금 회수 불가능
              </div>
            )}
          </Card>

          {/* 전체 판매 시 수익 */}
          <Card>
            <h3 className="text-lg font-semibold text-gray-800 mb-3">🎯 전체 판매 시 수익</h3>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span className="text-gray-600">매입 수량</span>
                <span className="font-medium">{data.quantity}개</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">총 매출</span>
                <span className="font-medium text-blue-600">{formatCurrency(calculations.totalRevenue)}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">총 수수료</span>
                <span className="text-red-500">-{formatCurrency(calculations.totalChannelFee)}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">총 판매비용</span>
                <span className="text-red-500">-{formatCurrency(calculations.totalSellingCosts)}</span>
              </div>
              <div className="border-t pt-2">
                <div className="bg-gradient-to-r from-green-50 to-emerald-50 p-3 rounded-lg">
                  <div className="text-center">
                    <div className="text-xs text-green-600 font-medium">순 총 수익</div>
                    <div className={`text-xl font-bold ${calculations.totalNetProfit > 0 ? 'text-green-600' : 'text-red-600'}`}>
                      {formatCurrency(calculations.totalNetProfit)}
                    </div>
                  </div>
                </div>
              </div>
              <div className="bg-purple-50 p-3 rounded-lg">
                <div className="text-center">
                  <div className="text-xs text-purple-600 font-medium">투자 수익률 (ROI)</div>
                  <div className={`text-lg font-bold ${calculations.roi > 0 ? 'text-purple-600' : 'text-red-600'}`}>
                    {calculations.roi.toFixed(1)}%
                  </div>
                </div>
              </div>
            </div>
            
            {calculations.totalNetProfit > 0 ? (
              <div className="mt-3 p-3 bg-green-50 rounded-lg">
                <div className="text-xs text-green-800 text-center">
                  <strong>💡 전체 {data.quantity}개 판매 시</strong><br/>
                  <strong>{formatCurrency(calculations.totalNetProfit)}</strong> 순이익 예상
                </div>
              </div>
            ) : (
              <div className="mt-3 p-3 bg-red-50 rounded-lg">
                <div className="text-xs text-red-800 text-center">
                  <strong>⚠️ 손실 예상</strong><br/>
                  판매가 조정 필요
                </div>
              </div>
            )}
          </Card>
        </div>
      </div>
    </div>
  );
};

export default MarginCalculator;